// <auto-generated />
using System;
using Dictionary.DAL.EntityContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dictionary.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dictionary.DAL.Models.EmailNewUser", b =>
                {
                    b.Property<int>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<int>("UserId");

                    b.HasKey("EmailId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailNewUsers");
                });

            modelBuilder.Entity("Dictionary.DAL.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author");

                    b.Property<string>("Body");

                    b.Property<DateTime>("DateTime");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Title");

                    b.Property<int>("UserId");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Dictionary.DAL.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new { RoleId = 1, RoleName = "Admin" },
                        new { RoleId = 2, RoleName = "User" }
                    );
                });

            modelBuilder.Entity("Dictionary.DAL.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("SurName");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new { UserId = 1, Email = "admin@gmail.com", IsDelete = false, Name = "Admin", Password = "TC1WcXee3ROg1FjLc6bJoPZ8aZo=", SurName = "Adminovich" },
                        new { UserId = 2, Email = "k170597@gmail.com", IsDelete = false, Name = "Golden", Password = "lclGv2Iu+TsKIRzQ/QKN/fz3454=", SurName = "Coffild" }
                    );
                });

            modelBuilder.Entity("Dictionary.DAL.Models.UserRoles", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { UserId = 1, RoleId = 1 },
                        new { UserId = 2, RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Dictionary.DAL.Models.EmailNewUser", b =>
                {
                    b.HasOne("Dictionary.DAL.Models.User", "User")
                        .WithMany("EmailNewUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dictionary.DAL.Models.Post", b =>
                {
                    b.HasOne("Dictionary.DAL.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dictionary.DAL.Models.UserRoles", b =>
                {
                    b.HasOne("Dictionary.DAL.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dictionary.DAL.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
